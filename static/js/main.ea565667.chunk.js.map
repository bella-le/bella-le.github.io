{"version":3,"sources":["app/components/Emoji.js","app/components/Landing.js","app/components/404.js","app/constants/routes.js","app/App.js","serviceWorker.js","index.js"],"names":["Emoji","props","className","role","aria-label","label","aria-hidden","symbol","StyledCard","styled","Card","Landing","Body","Title","CardLink","Link","Invalid","Footer","to","CenterDiv","div","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAWeA,EAVD,SAAAC,GAAK,OACf,0BACIC,UAAU,QACVC,KAAK,MACLC,aAAYH,EAAMI,MAAQJ,EAAMI,MAAQ,GACxCC,cAAaL,EAAMI,MAAQ,QAAU,QAEpCJ,EAAMM,S,0FCHf,IAAMC,EAAaC,YAAOC,IAAPD,CAAH,KAaDE,EATC,kBACZ,kBAACH,EAAD,KACI,kBAAC,IAAKI,KAAN,KACI,kBAAC,IAAKC,MAAN,KAAY,kBAAC,EAAD,CAAON,OAAO,kBAD9B,mC,8TCJR,IAAMC,EAAaC,YAAOC,IAAPD,CAAH,KAIVK,EAAWL,YAAOM,IAAPN,CAAH,KAoBCO,EAVC,kBACZ,kBAAC,EAAD,KACI,kBAAC,IAAKJ,KAAN,KACI,kBAAC,IAAKC,MAAN,YAAgB,kBAAC,EAAD,CAAON,OAAO,kBADlC,2BAIA,kBAAC,IAAKU,OAAN,KAAa,kBAACH,EAAD,CAAUI,GC3BR,KD2BF,W,sKEnBrB,IAAMC,EAAYV,IAAOW,IAAV,KAmBAC,EAZH,kBACV,kBAACF,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KDnBE,ICmBoBC,UAAWb,IAC9C,kBAAC,IAAD,CAAOY,KAAK,OAAOC,UAAWR,IAC9B,kBAAC,IAAD,CAAUE,GAAG,aCTDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ea565667.chunk.js","sourcesContent":["import React from 'react';\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\nexport default Emoji;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Emoji from './Emoji';\r\n\r\nconst StyledCard = styled(Card)`\r\n    width: 18rem;\r\n`;\r\n\r\nconst Landing = () => (\r\n    <StyledCard>\r\n        <Card.Body>\r\n            <Card.Title><Emoji symbol=\"ðŸ‘‘\" /></Card.Title>\r\n            under construction once again\r\n        </Card.Body>\r\n    </StyledCard>\r\n);\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Link } from 'react-router-dom';\r\nimport Emoji from './Emoji';\r\nimport * as ROUTES from '../constants/routes';\r\n\r\nconst StyledCard = styled(Card)`\r\n    width: 18rem;\r\n`;\r\n\r\nconst CardLink = styled(Link)`\r\n    color: #000;\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n    }\r\n    &:hover {\r\n        color: #890067;\r\n    }\r\n`;\r\n\r\nconst Invalid = () => (\r\n    <StyledCard>\r\n        <Card.Body>\r\n            <Card.Title>404 <Emoji symbol=\"ðŸ’€\" /></Card.Title>\r\n            not supposed to be here\r\n        </Card.Body>\r\n        <Card.Footer><CardLink to={ROUTES.LANDING}>back</CardLink></Card.Footer>\r\n    </StyledCard>\r\n);\r\n\r\nexport default Invalid;\r\n","export const LANDING = '/';\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Landing from './components/Landing';\nimport Invalid from './components/404';\nimport * as ROUTES from './constants/routes';\n\nconst CenterDiv = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n\nconst App = () => (\n  <CenterDiv>\n    <Router>\n      <Switch>\n        <Route exact path={ROUTES.LANDING} component={Landing} />\n        <Route path='/404' component={Invalid} />\n        <Redirect to='/404' />\n      </Switch>\n    </Router>\n  </CenterDiv>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}